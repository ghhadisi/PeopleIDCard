Box编辑工具:
下载jTessBoxEditor
https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/

训练之前可以使用编译或者安装的命令行查看命令行中的识别:
tesseract x.png y -l eng
识别x生成y.txt 使用 eng 训练数据
可以看到识别率不高


训练
https://github.com/tesseract-ocr/tesseract/wiki/Training-Tesseract

样本文件说明: 
Make sure there are a minimum number of samples of each character. 10 is good, but 5 is OK for rare characters.
There should be more samples of the more frequent characters - at least 20.
Don't make the mistake of grouping all the non-letters together. Make the text more realistic.
每个字符至少需要10个样本，对罕见的字符5个样本也可以.
对于频繁出现的字符至少需要20个样本.
不要把字符聚集在一起，非字符聚集在一起，而应该让需要样本更贴合实际(该啥样就啥样)
比如
The quick brown fox jumps over the lazy dog. 0123456789 !@#$%^&(),.{}&lt;&gt;/?
这样就没有下面这样好
The (quick) brown {fox} jumps! over the $3,456.78 &lt;lazy&gt; #90 dog & duck/goose, as 12.5% of E-mail from aspammer@website.com is spam?



1、获得box文件
   box文件中记录了tif/tiff的坐标对应被识别汉字
   方法一 从tif/tiff获得box文件:
       1.1.1 获得tif/tiff
           可以合并多个tif/tiff,从而增加训练样本,增强识别率
           tif/tiff文件可以从jpg、png转换过来,使用windows画图另存为或者ffmpeg转换。
       1.1.2 打开jTessBoxEditor->tools->merge tiff选择需要合并的tif文件,保存为[lang].[fontname].exp[num]。
   	   lang:语言名(训练生成的示为语言)
           fontname:字体名
           num:序号(无所谓)
       1.2 生成box
          sample: [lang].[fontname].exp[num] 为1.1.2 结果

          [card].[abc].exp.tif [lang].[fontname].exp[num] batch.nochop makebox
          tesseract [lang].[fontname].exp[num].tif [lang].[fontname].exp[num] batch.nochop makebox
          box文件与tif文件在同一目录下.
   方法二 通过text2image工具自动获得tif/box
       text2image --text=training_text.txt --outputbase=[lang].[fontname].exp0 --font='Font Name' --fonts_dir=/path/to/your/fonts
       如:
	text2image --text=training_text.txt --outputbase=eng.TimesNewRomanBold.exp0 --font='Times New Roman Bold' --fonts_dir=/usr/share/fonts
	text2image --text=training_text.txt --outputbase=eng --fonts_dir=/usr/share/fonts  --find_fonts --render_per_font=false

       mac上运行text2image一直出错!!!


2、校正box
   box文件记录的内容可能存在错误,比如 12345,在box中保存为1、2、34、5或者2、3、4、5或者1、a、5、4、5.
   所以需要手动进行校正.jTessBoxEditor[Box Editor]点击open打开box记录的tif文件.对错误地方进行校正,注意多个tif合并而成的tif会有多个页面,完成之后Save.

3、开始训练
   批处理命令完成
   3.1 产生字符特征文件:
   tesseract [lang].[fontname].exp[num].tif [lang].[fontname].exp[num] box.train 
   生成[lang].[fontname].exp[num].tr文件

   3.2 计算字符集
   unicharset_extractor [lang].[fontname].exp[num].box
   生成 unicharset 文件

   3.3 
   创建font_properties文件,文件内容为:
   <fontname> <italic> <bold> <fixed> <serif> <fraktur> 
   fontname:字体名
   italic:斜体             0/1
   bold:黑体               0/1
   fixed:默认字体           0/1
   serif:衬线字体           0/1
   fraktur:德文黑字体       0/1

   3.4 聚集字符特征
   shapeclustering -F font_properties -U unicharset [lang].[fontname].exp[num].tr
   [可以不运行] 生成 shapetable 文件

   mftraining -F font_properties -U unicharset -O [lang].unicharset [lang].[fontname].exp[num].tr
   生成 [lang].unicharset、inttemp(图形原型文件)、pffmtable(每个字符所对应的字符特征数文件)、shapetable(如果没有运行shapeclustering) 文件

   3.5 生成字符形状正常化特征文件
   cntraining [lang].[fontname].exp[num].tr
   生成 normproto 文件

   重命名shapetable, normproto, inttemp, pffmtable
   [lang].shapetable
   [lang].normproto
   [lang].inttemp
   [lang].pffmtable
   确保存在上面四个加上下面一个文件
   [lang].unicharset
   
   运行 combine_tessdata [lang].
   生成 [lang].traineddata 语言文件
 

4、测试
把[lang].traineddata拷贝到xx/share/tessdata中
对比执行
tesseract xx.png xx -l eng
tesseract xx.png xx -l card

